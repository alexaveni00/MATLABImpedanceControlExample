%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Two link robot arm with control to track a point that the user clicks.
%
% Files:
% MAIN - Execute this file; parameters here.
%
% Plotter -- Handles all integration and graphics (since the two are linked
% in the live-integration version)
%
% FullDyn -- Dynamics function of the form zdot = dynamics(z,t,params).
% This function evaluates BOTH the controller and the dynamics. Can
% probably be crunched through ode45 if you don't care about user
% interaction.
%   
% deriverRelativeAngles -- does symbolic algebra to derive the dynamics and
% the control equations. Automatically writes these to MATLAB functions:
%   - ForwardKin, GravityCompT1, GravityCompT2, ImpedanceControl,
%   Thdotdot1, Thdotdot2 --- All these are autogenerated and should not be
%   directly altered.
%
%
% Matthew Sheen, 2014
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
clc; close all;

clear all;

rederive = false;
%%%%%%%% System Parameters %%%%%%%%
run('constants.m');

%Initial conditions: Il primo parametro risulta sfasato di +90 gradi
p.init = init;

%%%%%%%% Control Parameters %%%%%%%%
p.Kp_min = Kp_min;
p.Kp_max = Kp_max;
p.Kd_min = Kd_min;
p.Kd_max = Kd_max;

p.g = g;
p.m1 = m1; %Mass of link 1.
p.m2 = m2; %Mass of link 2.
p.l1 = l1; %Total length of link 1.
p.l2 = l2; %Total length of link 2.
p.d1 = p.l1/2; %Center of mass distance along link 1 from the fixed joint.
p.d2 = p.l2/2; %Center of mass distance along link 2 from the fixed joint.
p.I1 = 1/12*p.m1*p.l1^2; %Moment of inertia of link 1 about COM
p.I2 = 1/12*p.m2*p.l2^2; %Moment of inertia of link 2 about COM

x0 = endZ(1); %End effector initial position in world frame.
y0 = endZ(2);
p.Fx = 0;
p.Fy = 0;

% Inizializzazione dei parametri RLS
p.theta = [p.Kp_min; 0]; % Vettore dei parametri stimati (Kp e un offset)
p.P = eye(2) * 1000; % Matrice di covarianza iniziale
p.lambda = 0.95; % Fattore di dimenticanza
p.alpha = 0.2; %Learning rate for the sRLS algorithm
p.dt = 0.001; %Intervallo di campionamento

%Single target:
p.xtarget = x0; %What points are we shooting for in WORLD SPACE?
p.ytarget = y0;
p.x0 = x0; %Initial position of the end effector in world space.
p.y0 = y0; %Initial position of the end effector in world space.
p.T = 4; %Period of the trajectory
%%%%%%%% Define Trajectory %%%%%%%%

% TERRAIN PARAMS
p.terrainParams = terrainParams;

p.terrainType = 'hard'; %Tipo di terreno iniziale
p.isActive = false; %Determina se il robot Ã¨ attivo o meno
p.isCompleted = false; %Determina se il robot ha completato la traiettoria
p.terrainLine1 = terrainLine1; %Altezza del terreno
p.trajectory = @(t) DefineTrajectory(t, x0, y0, p.T, p.terrainType);

Plotter(p) %Integration is done in real time using symplectic euler like we did in the CS animation class.