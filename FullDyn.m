function [zdot, T1, T2] = FullDyn( t,z,p,Kp,Kd, yt_final)
%FULDYN Full dynamics for the double pendulum. Uses autogenerated Thdotdot1
%and 2.
th1 = z(1);
th2 = z(3);
thdot1 = z(2);
thdot2 = z(4);
% Fdx = 0;
% Fdy = 0;
%Current disturbance force on end effector
FxCurrent = p.Fx;
FyCurrent = p.Fy;

%Current Target
xCurrentTar = p.xtarget;
yCurrentTar = p.ytarget;

xdotCurrentTar = 0;
ydotCurrentTar = 0;

%Torque to track our desired point
T = ImpedanceControl(Kd, Kp, p.l1, p.l2, th1, th2, thdot1, thdot2, xdotCurrentTar, xCurrentTar, ydotCurrentTar, yCurrentTar);
T1 = T(1) + GravityCompT1(0, 0, p.d1, p.d2, p.g, p.l1, p.l2, p.m1, p.m2, th1, th2, thdot1, thdot2);
T2 = T(2) + GravityCompT2(0, 0, p.d2, p.g, p.l1, p.l2, p.m2, th1, th2, thdot1);

% Calculate the torque multiplier based on the terrain type
multiplier = calculateTorqueMultiplier(p.terrainType, p);

% Apply the multiplier to the torques
T1 = T1 * multiplier;
T2 = T2 * multiplier;
%Use the autoderived functions for the accelerations. 
thdotdot1 = Thdotdot1(FxCurrent,FyCurrent,p.I1,p.I2,T1,T2,p.d1,p.d2,p.g,p.l1,p.l2,p.m1,p.m2,th1,th2,thdot1,thdot2);
thdotdot2 = Thdotdot2(FxCurrent,FyCurrent,p.I1,p.I2,T1,T2,p.d1,p.d2,p.g,p.l1,p.l2,p.m1,p.m2,th1,th2,thdot1,thdot2);

%Assemble the state vector derivatives.
zdot = [thdot1
    thdotdot1
    thdot2
    thdotdot2
    ];
end

% Questi parametri per soft e step sono stati scelti arbitrariamente 
function multiplier = calculateTorqueMultiplier(terrainType, p)
    switch terrainType
        case 'soft'
            multiplier = 0.7 + 0.3 * p.terrainLine1(1);
        case 'hard'
            multiplier = 1.0;
        case 'step'
            multiplier = 1.4 - 0.4 * p.terrainLine1(3);
    end
end